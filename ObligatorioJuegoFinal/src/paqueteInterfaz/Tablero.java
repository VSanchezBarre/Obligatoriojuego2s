package paqueteInterfaz;

import PackageJuego.Ficha;
import PackageJuego.JuegoMain;
import static PackageJuego.JuegoMain.posiblesMovimientos;
import PackageJuego.Jugador;
import PackageJuego.Partida;
import PackageJuego.Posibles;
import PackageJuego.Sistema;
import PackageJuego.Tablero1;
import static PackageJuego.Tablero1.generarPosicionesAbajoColumnas;
import static PackageJuego.Tablero1.generarPosicionesAbajoFila;
import static PackageJuego.Tablero1.generarPosicionesArribaColumnas;
import static PackageJuego.Tablero1.generarPosicionesArribaFila;
import paqueteInterfaz.MenuPrincipal;
import com.sun.xml.internal.ws.util.StringUtils;
import java.io.File;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.Clip;
import javax.sound.sampled.AudioSystem;
import java.awt.event.*;
import java.awt.*;
import java.util.ArrayList;
import javax.swing.*;
import sun.awt.resources.awt;

public class Tablero extends javax.swing.JFrame {

    private static Sistema sistema;
    private Partida partida;
    private Ficha fichaRoja, fichaAzul;
    private JButton[][] botones;
    private Tablero1 tablero;
    private int condicionVictoria;
    private int ultimaFilaGuardada;
    private int ultimaColumnaGuardada;
    boolean turno = true;
    boolean primerMovimiento = true;
    boolean seleccionoFicha = false;
    boolean seleccionoSegundaFicha = false;
    Posibles movimientosP;
    Color colorTurno = Color.red;
    boolean haymasMov = true;
    int contador = 0;

    public JButton[][] getBotones() {
        return botones;
    }

    public Tablero(Sistema unSistema, Jugador jugadorRojo, Jugador jugadorAzul, int condicion) {
        this.sistema = unSistema;
        partida = new Partida();
        partida.setJugadorUno(jugadorRojo);
        partida.setJugadorDos(jugadorAzul);
        sistema.getListaPartidas().add(partida);
        this.condicionVictoria = condicion;
        fichaRoja = new Ficha("rojo", generarPosicionesAbajoFila(), generarPosicionesAbajoColumnas(), partida);
        fichaAzul = new Ficha("azul", generarPosicionesArribaFila(), generarPosicionesArribaColumnas(), partida);
        sistema.getListaFichas().add(fichaAzul);
        sistema.getListaFichas().add(fichaRoja);
        partida.getJugadorUno().setFichasJugador(fichaRoja);
        partida.getJugadorDos().setFichasJugador(fichaAzul);
        int[] posicionesiValidasRojas = fichaRoja.getPosicionesi();
        int[] posicionesjValidasRojas = fichaRoja.getPosicionesj();
        int[] posicionesiValidasAzules = fichaAzul.getPosicionesi();
        int[] posicionesjValidasAzules = fichaAzul.getPosicionesj();
        initComponents();
        // crear botones y agregarlos al panel
        panelJuego.setLayout(new GridLayout(8, 9));
        botones = new JButton[8][9];
        for (int i = 0; i <= 7; i++) {
            for (int j = 0; j <= 8; j++) {
                int numero = 11;
                JButton jButton = new JButton();
                jButton.addActionListener(new ListenerBoton(i, j));
                panelJuego.add(jButton);
                botones[i][j] = jButton;
                botones[i][j].setMargin(new Insets(-5, -5, -5, -5));
                boolean valida = false;
                boolean valida2 = false;
                for (int m = 1; m < fichaRoja.getPosicionesi().length; m++) {
                    if ((i == posicionesiValidasRojas[m]) && (j == posicionesjValidasRojas[m])) {
                        valida = true;
                        numero = m;
                    }
                    if ((i == posicionesiValidasAzules[m]) && (j == posicionesjValidasAzules[m])) {
                        valida2 = true;
                        numero = m;
                    }
                }
                if (valida) {
                    botones[i][j].setBackground(Color.red);
                    botones[i][j].setText(Integer.toString(numero));

                }
                if (valida2) {
                    botones[i][j].setBackground(Color.blue);
                    botones[i][j].setText(Integer.toString(numero));
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelJuego = new javax.swing.JPanel();
        botonSalir = new javax.swing.JButton();
        botonEmpate = new javax.swing.JButton();
        botonTurno = new javax.swing.JButton();
        botonGanador = new javax.swing.JButton();
        jcontador = new javax.swing.JLabel();
        Rendirse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        javax.swing.GroupLayout panelJuegoLayout = new javax.swing.GroupLayout(panelJuego);
        panelJuego.setLayout(panelJuegoLayout);
        panelJuegoLayout.setHorizontalGroup(
            panelJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        panelJuegoLayout.setVerticalGroup(
            panelJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        getContentPane().add(panelJuego);
        panelJuego.setBounds(30, 40, 630, 420);

        botonSalir.setText("botonSalir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });
        getContentPane().add(botonSalir);
        botonSalir.setBounds(510, 0, 120, 32);

        botonEmpate.setText("Terminar en empate");
        botonEmpate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEmpateActionPerformed(evt);
            }
        });
        getContentPane().add(botonEmpate);
        botonEmpate.setBounds(347, 0, 150, 32);

        botonTurno.setText("Pasar turno");
        botonTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTurnoActionPerformed(evt);
            }
        });
        getContentPane().add(botonTurno);
        botonTurno.setBounds(30, 0, 110, 32);

        botonGanador.setText("Corroborar Ganador");
        botonGanador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGanadorActionPerformed(evt);
            }
        });
        getContentPane().add(botonGanador);
        botonGanador.setBounds(270, 470, 150, 32);
        getContentPane().add(jcontador);
        jcontador.setBounds(70, 446, 60, 40);

        Rendirse.setText("Rendirse");
        Rendirse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RendirseActionPerformed(evt);
            }
        });
        getContentPane().add(Rendirse);
        Rendirse.setBounds(200, 0, 100, 32);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        // TODO add your handling code here:
        resetearFichas(partida.getJugadorUno(), partida.getJugadorDos());
        dispose();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void botonEmpateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEmpateActionPerformed
        // TODO add your handling code here:
        resetearFichas(partida.getJugadorUno(), partida.getJugadorDos());
        dispose();
    }//GEN-LAST:event_botonEmpateActionPerformed

    private void botonTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTurnoActionPerformed
        // TODO add your handling code here:
        if (!primerMovimiento) {
            resetearValores();
            limpiarTablero(botones);
            pasarTurno();
            mostrarOptionpane("Pasar Turno", "Pasar turno", 1);
        } else {
            mostrarOptionpane("No se puede pasar turno en el primer movimiento", "Pasar turno", 0);
        }

    }//GEN-LAST:event_botonTurnoActionPerformed

    private void botonGanadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGanadorActionPerformed
        // TODO add your handling code here:
        Jugador ganador = Tablero1.ganador(partida.getJugadorUno(), partida.getJugadorDos(), condicionVictoria, buttonaInt(botones));
        if (ganador.getAlias().equals("Ninguno")) {
            mostrarOptionpane("La partida esta empatada", "Empate", 1);
        } else {
            playSound("superMarioWin.wav");
            mostrarOptionpane("FELICIDADES! EL GANADOR ES:" + ganador.getAlias(), "Ganador!", 1);
            ganador.setPartidasGanadas(ganador.getPartidasGanadas() + 1);
            resetearFichas(partida.getJugadorUno(), partida.getJugadorDos());
            dispose();
        }
    }//GEN-LAST:event_botonGanadorActionPerformed

    private void RendirseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RendirseActionPerformed
        // TODO add your handling code here:
        Color rendido = colorTurno;
        if (rendido.equals(Color.red)) {
            mostrarOptionpane("El jugador rojo se rindio,gana el jugador azul!","Rendicion",1);
            partida.getJugadorUno().setPartidasGanadas(partida.getJugadorUno().getPartidasGanadas()+1);
            resetearFichas(partida.getJugadorUno(),partida.getJugadorDos());
            dispose();
        }
        else{
            mostrarOptionpane("El jugador azul se rindio,gana el jugador rojo!","Rendicion",1);
            partida.getJugadorDos().setPartidasGanadas(partida.getJugadorDos().getPartidasGanadas()+1);
            resetearFichas(partida.getJugadorUno(),partida.getJugadorDos());
            dispose();
        }
    }//GEN-LAST:event_RendirseActionPerformed

    public void resetearFichas(Jugador jugadorUno, Jugador jugadorDos) {
        jugadorUno.setFichasJugador(new Ficha());
        jugadorDos.setFichasJugador(new Ficha());
    }

    //Metodo para producir sonido
    public void playSound(String soundName) {
        try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(soundName).getAbsoluteFile());
            Clip clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
        } catch (Exception ex) {
            System.out.println("Error with playing sound.");
            ex.printStackTrace();

        }
    }

    private class ListenerBoton implements ActionListener {

        private int x;
        private int y;

        public ListenerBoton(int i, int j) {
// en el constructor se almacena la fila y columna que se presionó
            x = i;
            y = j;
        }

        public void actionPerformed(ActionEvent e) {
// cuando se presiona un botón, se ejecutará este método
            clickBoton(x, y, ultimaFilaGuardada, ultimaColumnaGuardada);

        }

        private void clickBoton(int fila, int columna, int ultimaFila, int ultimaColumna) {
            jcontador.setText(Integer.toString(contador));
            boolean turno = true;
            playSound("sonidoBoton.wav");
            boolean colorCorrecto = botones[fila][columna].getBackground().equals(colorTurno) || botones[fila][columna].getBackground().equals(Color.green);
            //entra cuando selecciono hacia donde mover la ficha
            if (colorCorrecto) {
                if (primerMovimiento && seleccionoFicha) {
                    //2
                    System.out.println("2");
                    boolean movimientoValido = validarMovIAD(fila, columna, ultimaFila, ultimaColumna);
                    System.out.println("Movimiento Valido?:" + movimientoValido);
                    if (movimientoValido) {
                        primerMovimiento = false;
                        moverFicha(ultimaFilaGuardada, ultimaColumnaGuardada, fila, columna);
                        limpiarTablero(botones);
                        Posibles movimientos = posiblesMovimientos(fila, columna, buttonaInt(botones));
                        movimientosP = movimientos;
                        colorearPosibles(botones, movimientos, botones[fila][columna].getBackground());
                        turno = false;

                        if (movimientos.getEsPosible()) {
                            mostrarOptionpane("Seleccione una accion", "Seleccionar", 1);
                            turno = false;
                        } else {
                            mostrarOptionpane("No hay mas movimientos!Siguiente turno", "Seleccionar", 1);
                            turno = false;
                            pasarTurno();
                            haymasMov = false;
                            resetearValores();
                            contador++;
                        }
                    } else {
                        mostrarOptionpane("Mal seleccionada", "Error", 0);
                        turno = false;
                    }
                }

                if (!primerMovimiento && seleccionoSegundaFicha) {
                    //4
                    System.out.println("4");
                    if (posicionVacia(x, y, buttonaInt(botones))) {
                        moverFicha(ultimaFilaGuardada, ultimaColumnaGuardada, fila, columna);
                        limpiarTablero(botones);
                        turno = false;
                        Posibles movimientos = posiblesMovimientos(fila, columna, buttonaInt(botones));
                        movimientosP = movimientos;

                        if (movimientos.getEsPosible()) {
                            colorearPosibles(botones, movimientos, botones[fila][columna].getBackground());
                            mostrarOptionpane("Seleccione una accion", "Seleccionar", 1);
                            turno = false;
                        } else {
                            mostrarOptionpane("No hay acciones disponibles!Siguiente turno", "Seleccionar", 1);
                            turno = false;
                            pasarTurno();
                            haymasMov = false;
                            resetearValores();
                            contador++;
                        }
                    } else {
                        mostrarOptionpane("Mal seleccionada", "Error", 0);
                        turno = false;
                    }

                }
                while (turno) {

                    //1
                    if (primerMovimiento && !seleccionoFicha) {
                        if (botones[x][y].getBackground().equals(colorTurno)) {
                            haymasMov = true;
                            //Clickeo en el primer movimiento, selecciono la primera ficha a mover
                            System.out.println("1");
                            boolean sePuede = colorearIAD(fila, columna, colorTurno);
                            if (sePuede) {
                                ultimaFilaGuardada = fila;
                                ultimaColumnaGuardada = columna;
                                seleccionoFicha = true;
                                turno = false;
                                mostrarOptionpane("Seleccione una accion", "Seleccionar", 1);
                            } else {
                                mostrarOptionpane("Esta ficha esta al tope de movimientos", "Seleccionar", 0);
                                turno = false;
                            }
                        } else {
                            mostrarOptionpane("Mal seleccionada", "Error", 0);
                            turno = false;
                        }
                    }

                    if (!primerMovimiento && !seleccionoSegundaFicha) {
                        //3
                        System.out.println("3");
                        boolean movimientoValido = validarPosibles(movimientosP, buttonaInt(botones), fila, columna);
                        System.out.println("Movimiento valido?:" + movimientoValido);
                        if (movimientosP.getEsPosible() && movimientoValido) {
                            if (movimientoValido) {
                                botones[x][y].setBackground(colorTurno);
                                ultimaFilaGuardada = fila;
                                ultimaColumnaGuardada = columna;
                                seleccionoSegundaFicha = true;
                                boolean sePuede = colorearIAD(fila, columna, colorTurno);
                                if (sePuede) {
                                    mostrarOptionpane("Seleccione una accion", "Seleccionar", 1);
                                    turno = false;
                                } else {
                                    mostrarOptionpane("Esta ficha esta al limite", "Seleccionar", 0);
                                    turno = false;
                                }
                            } else {
                                mostrarOptionpane("Mal seleccionada", "Error", 0);
                                turno = false;
                            }
                        } else {
                            mostrarOptionpane("Mal seleccionada", "Error", 0);
                            turno = false;
                        }
                    }

                }
            } else {
                mostrarOptionpane("Mal seleccionada", "Error", 0);
            }

        }
    }

    public void pasarTurno() {
        if (colorTurno.equals(Color.red)) {
            colorTurno = Color.blue;
        } else {
            colorTurno = Color.red;
        }
    }

    public void moverFicha(int x, int y, int xNueva, int yNueva) {
        Color color = botones[x][y].getBackground();
        String textoFichaAnterior = botones[x][y].getText();
        botones[xNueva][yNueva].setBackground(color);
        botones[xNueva][yNueva].setText(textoFichaAnterior);
        botones[x][y].setBackground(null);
        botones[x][y].setText("");
        if (color.equals(Color.red)) {
            JuegoMain.setearPosiciones(fichaRoja, Integer.parseInt(textoFichaAnterior), xNueva, yNueva);
            partida.getListaMovimientos().add(textoFichaAnterior + direccionMovimiento(x, y, xNueva, yNueva));
            partida.getColores().add(0);

        } else {
            JuegoMain.setearPosiciones(fichaAzul, Integer.parseInt(textoFichaAnterior), xNueva, yNueva);
            partida.getListaMovimientos().add(textoFichaAnterior + direccionMovimiento(x, y, xNueva, yNueva));
            partida.getColores().add(1);
        }

    }

    public String direccionMovimiento(int xAnterior, int yAnterior, int x, int y) {
        String direccion = "";
        boolean anteriorRoja = esRoja(x, y);
        boolean anteriorAzul = esAzul(x, y);
        if (anteriorRoja) {
            //rojo izquierda
            if (xAnterior == x + 1 && yAnterior == y + 1) {
                direccion = "I";
            }
            //rojo adelante
            if (xAnterior == x + 1 && yAnterior == y) {
                direccion = "A";
            }
            //rojo derecha
            if (xAnterior == x + 1 && yAnterior == y - 1) {
                direccion = "D";
            }
        }
        if (anteriorAzul) {
            //azul izquierda
            if (xAnterior == x - 1 && yAnterior == y + 1) {
                direccion = "I";
            }
            //azul adelante
            if (xAnterior == x - 1 && yAnterior == y) {
                direccion = "A";
            }
            //azul derecha
            if (xAnterior == x - 1 && yAnterior == y - 1) {
                direccion = "D";
            }

        }
        return direccion;
    }

    public boolean validarPosibles(Posibles movimientos, int[][] tablero, int x, int y) {
        int fichaSeleccionada = tablero[x][y];
        boolean fichaValida = false;
        if (movimientos.getPosibles().contains(fichaSeleccionada)) {
            fichaValida = true;
        }
        return fichaValida;
    }

    public static void mostrarOptionpane(String mensaje, String titulo, int tipoMensaje) {
        JFrame unFrame = new JFrame(titulo);
        JOptionPane.showMessageDialog(unFrame, mensaje, titulo, tipoMensaje);

    }

    public boolean validarMovIAD(int x, int y, int xAnterior, int yAnterior) {
        boolean anteriorRoja = esRoja(xAnterior, yAnterior);
        boolean anteriorAzul = esAzul(xAnterior, yAnterior);
        boolean distinto = xAnterior != x || yAnterior != y;
        boolean valido = (anteriorRoja || anteriorAzul) && distinto && botones[x][y].getBackground().equals(Color.green) && posicionVacia(x, y, buttonaInt(botones));
        if (valido) {
            if (anteriorRoja) {
                //rojo izquierda
                if (xAnterior == x + 1 && yAnterior == y + 1) {
                    botones[x][y].setBackground(Color.red);
                }
                //rojo adelante
                if (xAnterior == x + 1 && yAnterior == y) {
                    botones[x][y].setBackground(Color.red);
                }
                //rojo derecha
                if (xAnterior == x + 1 && yAnterior == y - 1) {
                    botones[x][y].setBackground(Color.red);
                }
            }
            if (anteriorAzul) {
                //azul izquierda
                if (xAnterior == x - 1 && yAnterior == y + 1) {
                    botones[x][y].setBackground(Color.blue);
                }
                //azul adelante
                if (xAnterior == x - 1 && yAnterior == y) {
                    botones[x][y].setBackground(Color.blue);
                }
                //azul derecha
                if (xAnterior == x - 1 && yAnterior == y - 1) {
                    botones[x][y].setBackground(Color.blue);
                }

            }

        }
        return valido;
    }

    public boolean colorearIAD(int x, int y, Color unColor) {
        int[][] botonesInt = buttonaInt(botones);
        boolean sePuede = false;

        if (unColor.equals(Color.red) && esRoja(x, y)) {

            if (y != 0 && x != 0 && botonesInt[x - 1][y - 1] == 0 && posicionVacia(x - 1, y - 1, botonesInt)) {
                sePuede = true;
                botones[x - 1][y - 1].setBackground(Color.green);
            }
            if (x != 0 && y != 8 && botonesInt[x - 1][y + 1] == 0 && posicionVacia(x - 1, y + 1, botonesInt)) {
                botones[x - 1][y + 1].setBackground(Color.green);
                sePuede = true;
            }
            if (x != 0 && botonesInt[x - 1][y] == 0 && posicionVacia(x - 1, y, botonesInt)) {
                botones[x - 1][y].setBackground(Color.green);
                sePuede = true;
            }
        }
        if (unColor.equals(Color.blue) && esAzul(x, y)) {

            if (y != 0 && x != 7 && botonesInt[x + 1][y - 1] == 0 && posicionVacia(x + 1, y - 1, botonesInt)) {
                botones[x + 1][y - 1].setBackground(Color.green);
                sePuede = true;
            }
            if (y != 8 && x != 7 && botonesInt[x + 1][y + 1] == 0 && posicionVacia(x + 1, y + 1, botonesInt)) {
                botones[x + 1][y + 1].setBackground(Color.green);
                sePuede = true;
            }
            if (x != 7 && botonesInt[x + 1][y] == 0 && posicionVacia(x + 1, y, botonesInt)) {
                botones[x + 1][y].setBackground(Color.green);
                sePuede = true;
            }

        }
        return sePuede;
    }

    public boolean posicionVacia(int x, int y, int[][] tablero) {
        boolean vacia = true;
        Tablero1.imprimir(tablero, true);
        if (tablero.length >= x && tablero[0].length >= y && tablero[x][y] != 0) {
            vacia = false;
        }
        return vacia;
    }

    public void colorearPosibles(JButton[][] unosBotones, Posibles unPosible, Color color) {
        int[][] botonesInt = buttonaInt(unosBotones);
        ArrayList listaPosibles = unPosible.getPosibles();
        for (int i = 0; i <= 7; i++) {
            for (int j = 0; j <= 8; j++) {
                if (listaPosibles.contains(botonesInt[i][j]) && esRoja(i, j) && color.equals(Color.red)) {
                    unosBotones[i][j].setBackground(Color.green);
                }
                if (listaPosibles.contains(botonesInt[i][j]) && esAzul(i, j) && color.equals(Color.blue)) {
                    unosBotones[i][j].setBackground(Color.green);
                }
            }
        }
    }

    public static int[][] buttonaInt(JButton[][] unosBotones) {
        int[][] botonesInt = new int[8][9];
        for (int i = 0; i <= 7; i++) {
            for (int j = 0; j <= 8; j++) {
                String valorS = unosBotones[i][j].getText();
                if (!valorS.equals("")) {
                    int valorI = Integer.parseInt(valorS);
                    botonesInt[i][j] = valorI;
                } else {
                    botonesInt[i][j] = 0;
                }
            }
        }

        return botonesInt;
    }

    public boolean esRoja(int x, int y) {
        boolean esRoja = false;
        for (int i = 0; i <= 7; i++) {
            for (int j = 0; j <= 8; j++) {
                for (int m = 1; m < fichaRoja.getPosicionesi().length; m++) {
                    if ((x == fichaRoja.getPosicionesi()[m]) && (y == fichaRoja.getPosicionesj()[m])) {
                        esRoja = true;
                    }

                }

            }
        }
        return esRoja;
    }

    public boolean esAzul(int x, int y) {
        boolean esAzul = false;
        for (int i = 0; i <= 7; i++) {
            for (int j = 0; j <= 8; j++) {
                for (int m = 1; m < fichaAzul.getPosicionesi().length; m++) {
                    if ((x == fichaAzul.getPosicionesi()[m]) && (y == fichaAzul.getPosicionesj()[m])) {
                        esAzul = true;
                    }

                }

            }
        }
        return esAzul;
    }

    public void resetearValores() {
        primerMovimiento = true;
        seleccionoFicha = false;
        seleccionoSegundaFicha = false;
    }

    public void limpiarTablero(JButton[][] unTablero) {
        for (int i = 0; i <= 7; i++) {
            for (int j = 0; j <= 8; j++) {
                if (unTablero[i][j].getText().equals("")) {
                    unTablero[i][j].setBackground(null);
                } else {
                    if (unTablero[i][j].getBackground().equals(Color.green)) {
                        unTablero[i][j].setBackground(colorTurno);
                    }
                }

            }

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Rendirse;
    private javax.swing.JButton botonEmpate;
    private javax.swing.JButton botonGanador;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton botonTurno;
    private javax.swing.JLabel jcontador;
    private javax.swing.JPanel panelJuego;
    // End of variables declaration//GEN-END:variables

}
